x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin(t = 15)))
warnings()
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(magin = margin(t = 5)))
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 5)))
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 15)))
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 12)),
axis.title.y = element_text(margin = margin(r = 12)))
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 12)),
axis.title.y = element_text(margin = margin(r = 12)))
ggsave('../figures/average_proportion.pdf',
width = 6, height = 5)
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 12)),
axis.title.y = element_text(margin = margin(r = 8)))
ggsave('../figures/average_proportion.pdf',
width = 6, height = 5)
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = '55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 12)),
axis.title.y = element_text(margin = margin(r = 8)))
ggsave('../figures/average_proportion.pdf',
width = 6.5, height = 4)
all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed') +
annotate('text',
x = 0.555,
y = 9,
label = 'Chance:\n55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1)) +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 12)),
axis.title.y = element_text(margin = margin(r = 8)))
ggsave('../figures/average_proportion.pdf',
width = 6.5, height = 4)
# Core of plot:
prop_p <- all_props %>%
ggplot(aes(x = proportion)) +
geom_density(fill = 'purple', alpha = 0.8) +
geom_vline(xintercept = 0.55, linetype = 'dashed') +
geom_vline(xintercept = mean(all_props$proportion), linetype = 'dashed')
# Add annotations, axes, labels to plot:
prop_p <- prop_p +
annotate('text',
x = 0.555,
y = 9,
label = 'Chance:\n55% = 11/20 cells',
hjust = 0) +
annotate('text',
x = mean(all_props$proportion) - 0.005,
y = 7.5,
label = 'Average: 92%',
hjust = 1) +
xlab('Proportion of hierarchy consistent cases') +
ylab('Density') +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 10)) +
scale_x_continuous(limits = c(0.5, 1),
breaks = seq(0.5, 1, 0.1))
# Cosmetic tweaking:
prop_p <- prop_p +
theme_classic() +
theme(axis.title = element_text(face = 'bold',
size = 12),
axis.title.x = element_text(margin = margin(t = 12)),
axis.title.y = element_text(margin = margin(r = 8)))
# Show plot in markdown and also save externally outside of R:
prop_p
ggsave(plot = prop_p,
filename = '../figures/average_proportion.pdf',
width = 6.5, height = 4)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
# Chunk 3
# Get file names:
all_files <- list.files()
# Setup empty list for saving:
all_tables <- list()
# Put them all into list:
for (i in seq_along(all_files)) {
all_tables[[i]] <- read_delim(all_files[i], delim = ';')
}
# Change names to file names:
names(all_tables) <- str_replace_all(all_files, '.csv', '')
# Show:
head(all_tables)
for (i in seq_along(all_tables)) {
# Check if there is heat/touch, checking for column suffices here:
M <- all_tables[[i]]
if ('heat' %in% colnames(M)) {
# Signal to the world:
cat(str_c('I found a table that has heat, it is table number ',
i,
'... which is file: ', names(all_tables)[i]),
'\n')
# Add the heat column frequencies to the touch column:
M$touch <- M$touch + unlist(M[, 'heat'])
# Now that the counts are in the touch column, get rid of the heat column:
M <- select(M, -heat)
# Add the heat row frequencies to the touch row:
M[1, -1] <- M[1, -1] + unlist(M[2, -1])
# Now that the counts are in the touch row, get rid of the heat row:
M <- filter(M, `...1` != 'heat')
# Re-assign to table:
all_tables[[i]] <- M
}
}
for (i in seq_along(all_tables)) {
# Extract table from list, get rid of first column, and convert to matrix:
M <- as.matrix(all_tables[[i]][, -1])
# Set row names to column names (they are matched):
rownames(M) <- colnames(M)
# Override tibble in list with new simplified matrix:
all_tables[[i]] <- M
}
head(all_tables)
all_tables[2:3]
all_tables$day_1996_english <- t(all_tables$day_1996_english)
all_tables$day_1996_german_buddenbrooks <- t(all_tables$day_1996_german_buddenbrooks)
all_tables[2:3]
head(all_tables)
all_tables$doetsch_kraus_1992
all_tables$doetsch_kraus_1992_2
all_tables$doetsch_kraus_1992 + all_tables$doetsch_kraus_1992_2
head(all_tables)
all_tables[[4]] <- NULL
head(all_tables)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
# Chunk 3
# Get file names:
all_files <- list.files()
# Setup empty list for saving:
all_tables <- list()
# Put them all into list:
for (i in seq_along(all_files)) {
all_tables[[i]] <- read_delim(all_files[i], delim = ';')
}
# Change names to file names:
names(all_tables) <- str_replace_all(all_files, '.csv', '')
# Show:
head(all_tables)
# Chunk 4
for (i in seq_along(all_tables)) {
# Check if there is heat/touch, checking for column suffices here:
M <- all_tables[[i]]
if ('heat' %in% colnames(M)) {
# Signal to the world:
cat(str_c('I found a table that has heat, it is table number ',
i,
'... which is file: ', names(all_tables)[i]),
'\n')
# Add the heat column frequencies to the touch column:
M$touch <- M$touch + unlist(M[, 'heat'])
# Now that the counts are in the touch column, get rid of the heat column:
M <- select(M, -heat)
# Add the heat row frequencies to the touch row:
M[1, -1] <- M[1, -1] + unlist(M[2, -1])
# Now that the counts are in the touch row, get rid of the heat row:
M <- filter(M, `...1` != 'heat')
# Re-assign to table:
all_tables[[i]] <- M
}
}
# Chunk 5
for (i in seq_along(all_tables)) {
# Extract table from list, get rid of first column, and convert to matrix:
M <- as.matrix(all_tables[[i]][, -1])
# Set row names to column names (they are matched):
rownames(M) <- colnames(M)
# Override tibble in list with new simplified matrix:
all_tables[[i]] <- M
}
# Chunk 6
all_tables[2:3]
# Chunk 7
all_tables$day_1996_english <- t(all_tables$day_1996_english)
all_tables$day_1996_german_buddenbrooks <- t(all_tables$day_1996_german_buddenbrooks)
# Chunk 8
all_tables[2:3]
# Chunk 9
all_tables$doetsch_kraus_1992
all_tables$doetsch_kraus_1992_2
all_tables$doetsch_kraus_1992 <- all_tables$doetsch_kraus_1992 +
all_tables$doetsch_kraus_1992_2
all_tables[[4]]
all_tables[[3]]
head(all_tables)
all_tables[[4]] <- NULL
head(all_tables)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
# Chunk 3
# Get file names:
all_files <- list.files()
# Setup empty list for saving:
all_tables <- list()
# Put them all into list:
for (i in seq_along(all_files)) {
all_tables[[i]] <- read_delim(all_files[i], delim = ';')
}
# Change names to file names:
names(all_tables) <- str_replace_all(all_files, '.csv', '')
# Show:
head(all_tables)
# Chunk 4
for (i in seq_along(all_tables)) {
# Check if there is heat/touch, checking for column suffices here:
M <- all_tables[[i]]
if ('heat' %in% colnames(M)) {
# Signal to the world:
cat(str_c('I found a table that has heat, it is table number ',
i,
'... which is file: ', names(all_tables)[i]),
'\n')
# Add the heat column frequencies to the touch column:
M$touch <- M$touch + unlist(M[, 'heat'])
# Now that the counts are in the touch column, get rid of the heat column:
M <- select(M, -heat)
# Add the heat row frequencies to the touch row:
M[1, -1] <- M[1, -1] + unlist(M[2, -1])
# Now that the counts are in the touch row, get rid of the heat row:
M <- filter(M, `...1` != 'heat')
# Re-assign to table:
all_tables[[i]] <- M
}
}
# Chunk 5
for (i in seq_along(all_tables)) {
# Extract table from list, get rid of first column, and convert to matrix:
M <- as.matrix(all_tables[[i]][, -1])
# Set row names to column names (they are matched):
rownames(M) <- colnames(M)
# Override tibble in list with new simplified matrix:
all_tables[[i]] <- M
}
# Chunk 6
all_tables[2:3]
# Chunk 7
all_tables$day_1996_english <- t(all_tables$day_1996_english)
all_tables$day_1996_german_buddenbrooks <- t(all_tables$day_1996_german_buddenbrooks)
# Chunk 8
all_tables[2:3]
# Chunk 9
all_tables$doetsch_kraus_1992
all_tables$doetsch_kraus_1992_2
# Chunk 10
all_tables$doetsch_kraus_1992 <- all_tables$doetsch_kraus_1992 +
all_tables$doetsch_kraus_1992_2
# Chunk 11
all_tables[[4]] <- NULL
# Chunk 12
head(all_tables)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
# Chunk 3
# Get file names:
all_files <- list.files()
# Setup empty list for saving:
all_tables <- list()
# Put them all into list:
for (i in seq_along(all_files)) {
all_tables[[i]] <- read_delim(all_files[i], delim = ';')
}
# Change names to file names:
names(all_tables) <- str_replace_all(all_files, '.csv', '')
# Show:
head(all_tables)
# Chunk 4
for (i in seq_along(all_tables)) {
# Check if there is heat/touch, checking for column suffices here:
M <- all_tables[[i]]
if ('heat' %in% colnames(M)) {
# Signal to the world:
cat(str_c('I found a table that has heat, it is table number ',
i,
'... which is file: ', names(all_tables)[i]),
'\n')
# Add the heat column frequencies to the touch column:
M$touch <- M$touch + unlist(M[, 'heat'])
# Now that the counts are in the touch column, get rid of the heat column:
M <- select(M, -heat)
# Add the heat row frequencies to the touch row:
M[1, -1] <- M[1, -1] + unlist(M[2, -1])
# Now that the counts are in the touch row, get rid of the heat row:
M <- filter(M, `...1` != 'heat')
# Re-assign to table:
all_tables[[i]] <- M
}
}
# Chunk 5
for (i in seq_along(all_tables)) {
# Extract table from list, get rid of first column, and convert to matrix:
M <- as.matrix(all_tables[[i]][, -1])
# Set row names to column names (they are matched):
rownames(M) <- colnames(M)
# Override tibble in list with new simplified matrix:
all_tables[[i]] <- M
}
all_tables[2:3]
all_tables[[2]]
class(all_tables[[2]])
class(all_tables[[3]])
all_tables$day_1996_english <- t(all_tables$day_1996_english)
all_tables$day_1996_german_buddenbrooks <- t(all_tables$day_1996_german_buddenbrooks)
all_tables[2:3]
